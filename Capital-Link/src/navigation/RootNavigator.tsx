import type React from "react";
import { useEffect, useState } from "react";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import * as SecureStore from "expo-secure-store";
import LoginScreen from "../screens/auth/LoginScreen";
import RegisterScreen from "../screens/auth/RegisterScreen";
import OtpVerificationScreen from "../screens/auth/OtpVerificationScreen";
import InitialEntry from "../screens/auth/InitialEntryScreen";
import PinSetupScreen from "../screens/pin/PinSetupScreen";
import PinConfirmScreen from "../screens/pin/PinConfirmScreen";
import PinEntryScreen from "../screens/pin/PinEntryScreen";
import Home from "../screens/home/HomeScreen";
import Account from "../screens/accounts/AccountScreen";
import Deposit from "../screens/accounts/DepositScreen";
import Loan from "../screens/accounts/LoanScreen";
import Notification from "../screens/notifications/NotificationScreen";
import Profile from "../screens/Profile/ProfileScreen";
import OldPin from "../screens/Profile/ChangePin/OldPinVerifyScreen";
import NameChange from "../../src/screens/Profile/ChangeData/NameChangeRequestScreen";
import PhoneChange from "../screens/Profile/ChangeData/PhoneChangeRequestScreen";
import NotiSettings from "../screens/Profile/NotificationSettingsScreen";
import NewPinSetup from "../screens/Profile/ChangePin/NewPinSetupScreen";
import NewPinConfirm from "../screens/Profile/ChangePin/NewPinConfirmScreen";
import PinLocked from "../screens/pin/PinLockedScreen";
import ChangeDataUser from "../screens/Profile/ChangeData/ChangeDataUser";
import EmailChangeRequest from "../screens/Profile/ChangeData/EmailChangeRequest";
import AddressChangeRequest from "../screens/Profile/ChangeData/AddressChangeRequest";
import VerifyPinLock from "../screens/VerifyAccount/VerifyPinLock";
import type { DataUserType, StatusUserType } from "../Data/UserDataStorage";
import PendingScreen from "../screens/auth/PendingScreen";
import { useData } from "../Provide/Auth/UserDataProvide";

import {
  handleIncomingNotification,
  syncPushToken,
} from "../services/NotiPush";
import * as Notifications from "expo-notifications";
import AsyncStorage from "@react-native-async-storage/async-storage";
type ReturnTo = "PinEntry" | "Profile";
// üß† ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® Type ‡∏Ç‡∏≠‡∏á Route ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export type RootStackParamList = {
  InitialEntry: undefined;
  Login: undefined;
  Register: undefined;
  OtpVerification: {
    from: "Login" | "Register" | "PhoneChange";
    phoneNumber: string;
    Data?: object;
  };
  PinSetup: undefined;
  PinConfirm: { firstPin: string };
  PinEntry: undefined;
  Home: undefined;
  Account: undefined;
  Deposit: undefined;
  Loan: undefined;
  Notification: undefined;
  Profile: undefined;
  OldPin: { returnTo: ReturnTo };
  NameChange: undefined;
  PhoneChange: undefined;
  NotiSettings: undefined;
  NewPinSetup: { oldPin?: string; returnTo: ReturnTo };
  NewPinConfirm: { firstPin: string; returnTo: ReturnTo };
  PinLocked: { returnTo: ReturnTo };
  ChangeData: undefined;
  EmailChange: undefined;
  AddressChange: undefined;
  VerifyPinLock: { returnTo: ReturnTo };
  Pending: undefined;
};

// ‚úÖ ‡πÉ‡∏™‡πà generic ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
const Stack = createNativeStackNavigator<RootStackParamList>();

const RootNavigator: React.FC = () => {
  const { setNotifications } = useData();
  const [initialRoute, setInitialRoute] = useState<
    keyof RootStackParamList | null
  >(null);

  useEffect(() => {
    const determineInitialRoute = async () => {
      // ‡∏≠‡πà‡∏≤‡∏ô auth token ‡πÅ‡∏•‡∏∞ flag PIN ‡∏à‡∏≤‡∏Å SecureStore
      const token = await SecureStore.getItemAsync("userData");
      const pinDone = await SecureStore.getItemAsync("userPin");
      console.log("token", token);
      if (!token) {
        // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô/‡∏™‡∏°‡∏±‡∏Ñ‡∏£
        setInitialRoute("InitialEntry");
      } else if (!pinDone) {
        // ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á PIN
        setInitialRoute("PinSetup");
      } else {
        // ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á PIN ‡πÅ‡∏•‡πâ‡∏ß
        setInitialRoute("PinEntry");
      }
    };

    determineInitialRoute();
  }, []);
  useEffect(() => {
    syncPushToken();
  }, []);

  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>
  useEffect(() => {
    const subscription = Notifications.addNotificationReceivedListener(
      (notification) => {
        (async () => {
          const data = notification.request.content.data;
          const newNoti = {
            id: String(Date.now()), // ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string
            key: String(data.key || data.type || "unknown"), // ‚úÖ fallback
            title: notification.request.content.title ?? "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠",
            message: notification.request.content.body ?? "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
            date: String(data.date || new Date().toISOString().split("T")[0]),
            read: false,
          };

          console.log("üì• Receiving new noti:", newNoti);
          await handleIncomingNotification(newNoti);

          const stored = await AsyncStorage.getItem("readNotifications");
          const parsed = stored ? JSON.parse(stored) : [];
          const clean = parsed.filter((n) => n && typeof n === "object");
          setNotifications(clean); // <== ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
          console.log("üì• After handleIncomingNotification, stored =", stored);
        })();
      }
    );

    return () => subscription.remove();
  }, []);
  // useEffect(() => {
  //   const determineInitialRoute = async () => {
  //     // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å SecureStore
  //     const userDataJson = await SecureStore.getItemAsync("userData");
  //     const pinDone = await SecureStore.getItemAsync("userPin");
  //     console.log("userDataJson", userDataJson);
  //     console.log("pinDone", pinDone);
  //     if (!userDataJson) {
  //       // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡∏°‡∏±‡∏Ñ‡∏£/‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  //       setInitialRoute("InitialEntry");
  //       return;
  //     }

  //     // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Object ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏π statusUser
  //     let statusUser: StatusUserType = "underfind";
  //     try {
  //       const { statusUser: s } = JSON.parse(userDataJson);
  //       statusUser = s;
  //     } catch {
  //       // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ underfind
  //       statusUser = "underfind";
  //     }

  //     switch (statusUser) {
  //       case "underfind":
  //         setInitialRoute("InitialEntry");
  //         break;
  //       // case "docSub":
  //       //   setInitialRoute("Pending"); // ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ
  //       //   break;
  //       // case "docInCom":
  //       //   setInitialRoute("Register"); // ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  //       //   break;
  //       case "NewApp":
  //         // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á PIN ‡πÉ‡∏´‡πâ‡πÑ‡∏õ PinSetup ‡∏Å‡πà‡∏≠‡∏ô
  //         if (!pinDone) {
  //           setInitialRoute("PinSetup");
  //         } else {
  //           setInitialRoute("PinEntry");
  //         }
  //         break;
  //       default:
  //         setInitialRoute("InitialEntry");
  //     }
  //   };

  //   determineInitialRoute();
  // }, []);

  if (!initialRoute) {
    // ‡∏£‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏≠‡∏≤‡∏à‡πÅ‡∏™‡∏î‡∏á Splash)
    return null;
  }
  return (
    <Stack.Navigator
      // üîß ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô TypeScript error ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏∏ id ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
      id={undefined}
      // initialRouteName="Register"
      // initialRouteName="InitialEntry"
      initialRouteName={initialRoute}
      //initialRouteName=""
      screenOptions={{ headerShown: false, animation: "none" }}
    >
      {/* <Stack.Screen name="Splash" component={SplashScreen} /> */}
      <Stack.Screen name="InitialEntry" component={InitialEntry} />
      <Stack.Screen name="Register" component={RegisterScreen} />
      <Stack.Screen name="Login" component={LoginScreen} />
      <Stack.Screen name="OtpVerification" component={OtpVerificationScreen} />
      <Stack.Screen name="PinSetup" component={PinSetupScreen} />
      <Stack.Screen name="PinConfirm" component={PinConfirmScreen} />
      <Stack.Screen name="PinEntry" component={PinEntryScreen} />
      <Stack.Screen name="Home" component={Home} />
      <Stack.Screen name="Account" component={Account} />
      <Stack.Screen name="Deposit" component={Deposit} />
      <Stack.Screen name="Loan" component={Loan} />
      <Stack.Screen name="Notification" component={Notification} />
      <Stack.Screen name="Profile" component={Profile} />
      <Stack.Screen name="OldPin" component={OldPin} />
      <Stack.Screen name="NameChange" component={NameChange} />
      <Stack.Screen name="PhoneChange" component={PhoneChange} />
      <Stack.Screen name="NotiSettings" component={NotiSettings} />
      <Stack.Screen name="NewPinSetup" component={NewPinSetup} />
      <Stack.Screen name="NewPinConfirm" component={NewPinConfirm} />
      <Stack.Screen name="ChangeData" component={ChangeDataUser} />
      <Stack.Screen name="EmailChange" component={EmailChangeRequest} />
      <Stack.Screen name="AddressChange" component={AddressChangeRequest} />
      <Stack.Screen name="VerifyPinLock" component={VerifyPinLock} />
      <Stack.Screen name="Pending" component={PendingScreen} />
      <Stack.Screen
        name="PinLocked"
        component={PinLocked}
        options={{
          headerShown: false,
          gestureEnabled: false, // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        }}
      />
    </Stack.Navigator>
  );
};

export default RootNavigator;
